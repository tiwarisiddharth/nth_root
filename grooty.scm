(define (pow a b) 
  
  (define (fractor n count) 
    (if (= (mod (* n 10) 1) 0)
        (list (gcd (* n 10) (* 10 count)) (* 10 count))
        (fractor (* n 10) (* 10 count))))
  (define (numer n) (* (/ n (car (fractor n 1)))  (car (cdr (fractor n 1))
)))
  (define (denom n) (/ (numer n) n))  
  (define (square c) (* c c))
  (define (nth x n)
    (define (good-enough? guess)
      (< (abs (- (pow guess n) x)) 0.0001))
    (define (improve guess)
      (/ (+ (* (- n 1) guess) (/ x (pow guess (- n 1)) )) n))
    (define (nth-iter guess)
      (if (good-enough? guess)
          guess
          (nth-iter (improve guess))))
  (nth-iter 1.0))
  (cond
    ((and (>  b 0) (< b 1)) (nth (pow a (numer b)) (denom b)))
    ((= a 1)  1)
    ((= a 0)  0)
    ((= b 0)  1)
    ((< b 0) (/ 1.0 (pow a (* -1 b))))
    ((= (mod b 2) 0) (square (pow a (/ b 2))))
    (else (* a (pow a (- b 1))))))

